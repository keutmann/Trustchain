{
  "algorithm": "merkle.tc1-double256", // Merkle=Merkle algo, tc1=Trustchain version 1, double256=sha256(sha256))
  "id": "", // Merkle root of the trust ids.
  "trusts": [
    {
      "algorithm": "double256", // Algo to be used for calculating the id of the trust. Default double sha256
      "id": "i/Pd9j9fDh0GGt5pPhAQfq2RsI8mcYmM/vfNhm1Qql0=", // A hash of the binary combined value of the trust
      "issuer": {
        "script": "btc-pkh",
        "id": "F2u5DwkfJUjVDy7gCDp68hbQUDM=", // Base64 encoding of a 20 byte address
        "signature": "H/hqGOZwZNz2/rz0udzyx4eHLzTMvx67ASmp0whBbjq0JAoJokrRnDAWsHNgBQtlYifoH3SG5pjbgS/9+H4Ukuc="
      },
      "subjects": [
        {
          "alias": "MyAlias", // It's related to the scope of the claim
          "claimIndexs": [ 0 ], // One or more claims can be attached to the subject
          "id": "1ERgQJdwncLvXv16mQaKu...", // id of the subject, format specified in script.
          "kind": "person" // Specifies the type of the id. Helps on filtering on Trust resolvement.
        }
      ],
      "claims": [
        {
          "index": 0, // Optional, specify index, if the possibility of claim object gets reordered.
          // Claim made about the subject. The format is specified by the version property in the header section.
          "data": [
            {
              "kind": "tc-binarytrust-1.0", // tc=Trustchain, binarytrust=graph, 1.0=version
              "trust": true, // Endicates if the subject is trusted or not.
              "confirm": true, // Endicates if the subject is confirmed to be real.
              "reason": "....." // Some text describing the reason for the trust. Max 100 bytes
            }
          ],
          // This is a cost when resolving the trust. A more nodes are followed with low values.
          // The cost property can only have a value below 100 if the subject signature is provided. This helps e.g. search companies.
          // The cost value cannot be below 1 (avoid infinite loop).
          "cost": 100,
          "activate": 1231006505, // When will the trust be active. unixepoch
          "expire": 2231006505, // When will the trust deactivate. unixepoch
          // Scope is used to filter on trust resolvement. It can be any text
          "scope": "global" // The scope could also be specefic to country, area, products, articles or social medias et
        }
      ],
      // The timestamp is used when the trust is repackaged into an other package
      "timestamp": {
        "algorithm": "merkle.tc1-double256", // Merkle=Merkle algo, tc1=Trustchain version 1, double256=sha256(sha256))
        "recipt": "", // Merkletree path, used for recreating the merkle root value.
        // The package timestamp comes from the original package. Makes it possible to calculate the root hash for timestamp verification.
        "package": [
          {
            "blockchain": "btc",
            "algorithm": "merkle.tc1-double256", // Merkle=Merkle algo, tc1=Trustchain version 1, double256=sha256(sha256))
            "time": 123455,
            "recipt": "",
            "service": "" // Optional, the url of the service provided the timestamp
          }
        ]
      }
    }
  ],
  // The server that creates the package
  "server": {
    "script": "btc-pkh",
    "id": "",
    "signature": ""
  },
  // Timestamps of the package
  "timestamps": [ // Array of timestamps, then fast and slow timestamps are possible
    {
      "blockchain": "btc", // The blockchain used for the timestamp
      "algorithm": "merkle.tc1-double256", // Merkle=Merkle algo, tc1=Trustchain version 1, double256=sha256(sha256))
      "time": 123455, // Transaction time used for the timestamp
      "recipt": "", // Merkletree path, used for recreating the merkle root value.
      "service": "" // Optional, the url of the service provided the timestamp
    }
  ]
}
